Leetcode - 51. N-Queens
https://leetcode.com/problems/n-queens/

class Solution {
    List<List<String>> ar= new LinkedList<List<String>>();
    public List<List<String>> solveNQueens(int n) {
        boolean a[][]=new boolean[n][n];
        traversal(a,0,0,n);
        return ar;
    }
    
    public void traversal(boolean[][] a,int r,int c,int n){
        if(c==a.length){
            r++;
            c=0;
        }
        
        if(r==a.length && n==0){
            String s="";
            List<String> an=new LinkedList<String>();
            for(int i=0;i<a.length;i++){
                for(int j=0;j<a.length;j++){
                    if(a[i][j]==false){
                        s+=".";
                    }
                    else{
                        s+="Q";
                    }
                }
                an.add(s);
                s="";
            }
            ar.add(new LinkedList<String>(an));
            return;
        }
        else if(r>=a.length){
            return;
        }
        
        //System.out.println(r+" "+c+" "+n);
        if(QueenCanBePlaced(a,r,c)==true){
            a[r][c]=true;
            traversal(a,r,c+1,n-1);
            a[r][c]=false;
        }
        traversal(a,r,c+1,n);
    }
    public boolean QueenCanBePlaced(boolean[][] a,int r,int c){
        int i=r-1;
        int j=c;
        while(i>=0){
            if(a[i][j]==true){
                return false;
            }
            --i;
        }
        
        i=r+1;
        while(i<a.length){
            if(a[i][j]==true){
                return false;
            }
            i++;
        }
        
        i=r;
        j=c-1;
        while(j>=0){
            if(a[i][j]==true){
                return false;
            }
            j--;
        }
        
        j=c+1;
        while(j<a.length){
            if(a[i][j]==true){
                return false;
            }
            j++;
        }
        
        i=r+1;
        j=c+1;
        while(i<a.length && j<a.length){
            if(a[i][j]==true){
                return false;
            }
            i++;j++;
        }
        
        i=r-1;
        j=c-1;
        while(i>=0 && j>=0){
            if(a[i][j]==true){
                return false;
            }
            i--;j--;
        }
        
        i=r+1;
        j=c-1;
        while(i<a.length && j>=0){
            if(a[i][j]==true){
                return false;
            }
            i++;j--;
        }
        
        i=r-1;
        j=c+1;
        while(i>=0 && j<a.length){
            if(a[i][j]==true){
                return false;
            }
            i--;j++;
        }
        
        return true;
    }
}