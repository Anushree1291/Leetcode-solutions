Leetcode - 1235. Maximum Profit in Job Scheduling
https://leetcode.com/problems/maximum-profit-in-job-scheduling/

class Solution {
    Integer[] dp;
    
    public int jobScheduling(int[] s, int[] e, int[] p) {
        int n=p.length;
        int a[][]=new int[n][3];
        dp=new Integer[n+1];
        for(int i=0;i<s.length;i++){
            a[i]=new int[]{s[i],e[i],p[i]};
        }
        Arrays.sort(a, (x,y)->(x[0]-y[0]));
        for(int i=0; i<a.length; i++){
             System.out.println(Arrays.toString(a[i]));
        }
        
        return backt(a,0,n);
    }
    public int backt(int[][] a, int i,int n){
        if(i>=n){
            return 0;
        }
        if(dp[i]!=null){
            return dp[i];
        }
        int no=backt(a,i+1,n);
        int in=binary(a, i+1,n-1,a[i][1]);
        int ye=a[i][2]+backt(a,in,n);
        System.out.println(no+" "+i+" "+in+" "+ye);
        return dp[i]=Math.max(no,ye);
    }
    public int binary(int[][] a, int l,int h,int t){
        int r=-1;
        while(l<=h){
            int m=l+(h-l)/2;
            if(a[m][0]==t){
                r=m;
                h=m-1;
            }
            else if(a[m][0]>t){
                h=m-1;
            }
            else{
                l=m+1;
            }
        }
        if(r!=-1) return r;
        return l;
    }
}
